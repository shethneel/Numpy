# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10eal4r1BrgvwMY2hzNMx3XThMSjVBrsV
"""

import numpy as np

lst = [3,6,9]

"""Converting list to numpy array"""

arr = np.array(lst)

arr

arr.shape

"""It means it has 3 elements.
1D array has no row or column

Let's see for 2D
"""

lst2 = [2,4,6]

arr2 = np.array([lst2])

arr2.shape

"""That means it has 1 row and 3 columns

Changing element from its position :
"""

arr2[0,1]

arr2[0,1] = 69

"""5 ways to crate arrays in numpy :

1. Conversion from list/tuple
2. Using intrinsic numpy creation objects (arange, zeros, ones)
3. Reading from disk/saved data
4. From the raw bytes through the use of string/buffer
5. Special library function such as Random
"""

arr2

arr2.size

"""Using intrinsic numpy creation objects (arange, zeros, ones)"""

zeros = np.zeros([2,3])

zeros

arng = np.arange(10)

# it is kind of range function only that returns array of numbers from start to end-1

arng

lspc = np.linspace(1,5,5)

# it gives numbers with equal space from start and end range
# syntax : np.linspace(start, end, required_numbers)

lspc

emp = np.empty((2,2))

#it returns empty array of random values which are replacable

emp

emp_lik = np.empty_like(arr2)

# copies size of passed array and make same size new array with random/same elements

emp_lik

ide = np.identity(5)

# returns give size's array

ide

ide.shape

ide.size

ar = np.arange(99)

ar

ar.shape

ar = ar.reshape(9,11)

# it reshapes array into passed formate, only catch is that multiplication of passed row,column should be equal to total elements of array

ar

ar = ar.ravel()

# converts any array to 1D array

ar

ar.shape

x = [[1,2,3], [4,5,6], [7,8,9]]

y = np.array(x)

y

"""axis 0 = all rows, travels vertically

axis 1 = all columns, travels horizontally
"""

y.sum(axis=0)

# when we mention about axis=0, that means first it will add all the first elements of rows, in this case it is 12, then second elements and then third (15 & 18)

y.sum(axis=1)

y.T

# transpose

for i in y.flat:
  print (i)

# it returns all elements of array, if we don't use flat then it will give us 3 different arrays respective to their rows

y.ndim

# returns number of dimentions

y.size

y.nbytes

# returns bytes of array

y.argmax()

# returns index value of max element in array

y.argmin()

# returns index value of min element in array

np.sqrt(y)

# returns square root of array

